'use client';import { Badge } from '@/components/ui/badge';import { buttonVariants } from '@/components/ui/button';import {  Command,  CommandEmpty,  CommandGroup,  CommandInput,  CommandItem,  CommandList,} from '@/components/ui/command';import {  Dialog,  DialogContent,  DialogHeader,  DialogTitle,  DialogTrigger,} from '@/components/ui/dialog';import { useHotkeys } from '@mantine/hooks';import { Prisma, Subreddit } from '@prisma/client';import { useQuery } from '@tanstack/react-query';import { useClickAway } from '@uidotdev/usehooks';import axios from 'axios';import debounce from 'lodash.debounce';import { Loader2, Search, Users } from 'lucide-react';import { usePathname, useRouter } from 'next/navigation';import { useCallback, useEffect, useRef, useState } from 'react';const SearchBar = () => {  const [searchQuery, setSearchQuery] = useState('');  const [isOpen, setIsOpen] = useState(false);  const { push, refresh } = useRouter();  const pathname = usePathname();  const commandInputRef = useRef<HTMLInputElement>(null);  const commandRef = useClickAway<HTMLDivElement>(() => {    setSearchQuery('');  });  useHotkeys([    [      'mod+k',      () => {        setIsOpen(true);        commandInputRef.current?.focus();      },    ],  ]);  const {    data: queryResults,    refetch,    isFetched,    isFetching,  } = useQuery({    queryKey: ['search-query'],    queryFn: async () => {      if (!searchQuery) {        return [];      }      const { data } = await axios.get(`/api/search?q=${searchQuery}`);      return data as (Subreddit & {        _count: Prisma.SubredditCountOutputType;      })[];    },  });  const request = debounce(async () => {    refetch();  }, 300);  const debouncedRequest = useCallback(() => {    request();    // eslint-disable-next-line react-hooks/exhaustive-deps  }, []);  const handleCommandInputChange = useCallback(    (text: string) => {      setSearchQuery(text);      debouncedRequest();    },    [debouncedRequest]  );  useEffect(() => {    setSearchQuery('');  }, [pathname]);  return (    <Dialog open={isOpen} onOpenChange={setIsOpen}>      <DialogTrigger>        <div className={buttonVariants({ variant: 'outline' })}>          <Search className="mr-2 size-5" />          Search Communities...          <Badge variant="outline" className="ml-2">            Ctrl+K          </Badge>        </div>      </DialogTrigger>      <DialogContent showCloseButton={false} className="border-0 p-0">        <DialogHeader className="sr-only h-0">          <DialogTitle>Search Communities</DialogTitle>        </DialogHeader>        <Command          ref={commandRef}          className="relative max-w-lg overflow-visible rounded-lg border"        >          <CommandInput            className="border-none outline-none ring-0 focus:border-none focus:outline-none"            placeholder="Search communities..."            value={searchQuery}            onValueChange={handleCommandInputChange}            ref={commandInputRef}          />          <div className="pointer-events-none absolute right-2 top-2">            <Badge variant="secondary">Esc</Badge>          </div>          <CommandList className="min-h-60 rounded-b-md bg-white shadow">            {!searchQuery && (              <CommandEmpty>                <div className="flex items-center justify-center text-zinc-500">                  Please start typing to search.                </div>              </CommandEmpty>            )}            {searchQuery?.length > 0 && (              <>                <CommandEmpty>                  <div className="flex items-center justify-center text-zinc-500">                    {isFetched && !isFetching && 'No results found.'}                    {isFetching && (                      <>                        <Loader2 className="mr-2 size-5 animate-spin" />{' '}                        Searching...                      </>                    )}                  </div>                </CommandEmpty>                {(queryResults?.length ?? 0) > 0 && (                  <CommandGroup heading="Communities">                    {queryResults?.map((subreddit) => (                      <CommandItem                        key={subreddit.id}                        onSelect={(e) => {                          push(`/r/${e}`);                          refresh();                          setIsOpen(false);                        }}                        value={subreddit.name}                      >                        <Users className="mr-2 size-4" />                        <a href={`/r/${subreddit.name}`}>{subreddit.name}</a>                      </CommandItem>                    ))}                  </CommandGroup>                )}              </>            )}          </CommandList>        </Command>      </DialogContent>    </Dialog>  );};export default SearchBar;